// 2021 PinkTomate - Beach, Bente, Oba & Simo
// Starter code from 2021 studio derfunke for MDD

var sound;


// credentials to connect to MQTT broker
let settings = 
{
  broker: 'connectr.cloud.shiftr.io',
  username: 'connectr',
  token: '6ouWxIIVDIJMrmdq'
}


// topics that this sketch subscribes to
let subs = 
[
  'PinkTomate/#',  // # means subscribe to all subtopics
]

let topic_out = "PinkTomate/LED"

let levels1 = {}
let levels2 = {}

let lastAngle=0;
var sensor1covered = false;
var sensor2covered = false;
var sensor1wasCovered = false;
var sensor2wasCovered = false;

// initialize the mqtt websocket connection
// see: https://www.eclipse.org/paho/index.php?page=clients/js/index.php
client = new Paho.MQTT.Client(
  settings.broker,
  Number(443),
  "p5js-sketch"
)

// callbacks for events
client.onConnectionLost = onConnectionLost
client.onMessageArrived = onMessageArrived

function preload()
{
  // initialize sound
  sound = loadSound('doors.mp3');
}

function setup() 
{
  createCanvas(windowWidth, windowHeight)
  client.connect({
    onSuccess: onConnect,
    userName: settings.username,
    password: settings.token,
    useSSL: true,
  })
}

function draw() 
{
  background(250)
  
  if(Object.values(levels1 || levels2).length == 0) 
  { 
        textSize(20);
        fill('#000000');
        textFont('Roboto Mono');
        text('No incoming sensor data', width/2, height/2); 

  }
  
  console.log(levels1);
  console.log(levels2);
  
  // STATUS OF SENSOR 1
  if(levels1 != undefined) 
  {
  // go through all the sensor data we have received to visualize it
      for( const [sensor, value] of Object.entries(levels1)) 
      {

        let angle = map(value, 2, 350, 0, 10)        
        if (angle < 1)
        {
          sensor1covered = true;
        }
        else if (angle>= 1)
        {
          sensor1covered = false;
        }
      }
  }
  // STATUS OF SENSOR 2
  if(levels2 != undefined) 
  {
  // go through all the sensor data we have received to visualize it
      for( const [sensor, value] of Object.entries(levels2)) 
      {

        let angle = map(value, 2, 350, 0, 10)        
        if (angle < 1)
        {
          sensor2covered = true;
        }
        else if (angle>=1)
        {
          sensor2covered = false;
        }
      }
  }
  
  
  // check for triggering audio
  // status of covering:
  // sensor1 sensor2    wasCovered1?  wasCovered2?
  // 0        0          
  // 1        0          0            0
  // 1        1          1            0
  // 1        1          1            1
  
  
  if (sensor1covered && sensor2covered 
      && (!sensor1wasCovered || !sensor2wasCovered)) {
    
    sound.play();
    var led = 1;
    mqttSendMessage(led); 
  }
  
  else if (!sensor1covered || !sensor2covered) {
    sound.stop();
    var led = 0;
    mqttSendMessage(led); 
  }
  
  
  
  sensor1wasCovered = sensor1covered;
  sensor2wasCovered = sensor2covered;
  
  
  
  if (sensor1covered) {
    fill(255,0,0);
  } else {
    noFill();
  }
  rect(50,50,100,100);
  
  if (sensor2covered) {
    fill(255,0,0);
  } else {
    noFill();
  }
  rect(200,50,100,100);
  
  
  
}


function onConnect() 
{
  console.log("connected to shiftr")
  subs.forEach((element) => {
    console.log("subscribing to topic [" + element + "]")
    client.subscribe(element)
  })
}

function onConnectionLost(responseObject) 
{
  if (responseObject.errorCode !== 0) {
    console.log("lost connection to shiftr:" + responseObject.errorMessage)
  }
}

// called when a message arrives
function onMessageArrived(message) 
{
  //console.log("received <- topic: " + message.destinationName + " payload:" + message.payloadString)
  // create a list with all the readings and their values so that we can do a simple visualization
//   levels[message.destinationName] = parseInt(message.payloadString)
  
  if(message.destinationName == 'PinkTomate/light') 
  { 
   levels1[message.destinationName] = parseInt(message.payloadString)
  } 
  else if(message.destinationName == 'PinkTomate/light2') 
  { 
   levels2[message.destinationName] = parseInt(message.payloadString)
  }
}


function mqttSendMessage(payload) 
{
  //console.log("sending: " + payload)
  let message = new Paho.MQTT.Message( payload.toString() )
  message.destinationName = topic_out
  client.send(message)
}
